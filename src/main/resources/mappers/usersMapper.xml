<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 회원 정보 삽입 -->
<mapper namespace="com.iof.center.user">
	<insert id="insertUser2" parameterType="user">
		insert into iof_users (
			user_id,
			user_pw,
			user_name,
			user_email,
			user_phone,
			user_addr1,
			user_addr2,
			user_addr3,
			user_zipcode,
			user_createtime,
			user_updatetime,
			user_lastlogin,
			user_level,
			user_social,
			user_nickname,
			user_token
		)
		values(
			#{user_id},
			#{user_pw}, 
			#{user_name}, 
			#{user_email}, 
			#{user_phone},		
			#{user_addr1}, 
			#{user_addr2}, 
			#{user_addr3},
			#{user_zipcode},
			#{user_createtime}, 
			#{user_updatetime}, 
			#{user_lastlogin},		
			#{user_level},
			#{user_social},
			#{user_nickname},
			#{user_token}
		)
	</insert>
	
	<insert id="insertUser" parameterType="user">
		insert into iof_users (
			user_id,
			user_pw,
			user_name,
			user_email,
			user_phone,
			user_addr1,
			user_addr2,
			user_addr3,
			user_zipcode,
			user_createtime,
			user_updatetime,
			user_lastlogin,
			user_level,
			user_token
		)
		values(
			#{user_id}, 
			#{user_pw}, 
			#{user_name},
			#{user_email},
			#{user_phone},
			#{user_addr1}, 
			#{user_addr2}, 
			#{user_addr3},
			#{user_zipcode},		
			#{user_createtime}, 
			#{user_updatetime}, 
			#{user_lastlogin},		
			#{user_level},
			#{user_token}
		)
	</insert>

	<!-- 회원 정보 수정 -->
	<update id="updateUser" parameterType="user">
		update iof_users
		set user_pw = #{user_pw},
		user_name = #{user_name},
		user_phone = #{user_phone},
		user_zipcode = #{user_zipcode},
		user_addr1 = #{user_addr1},
		user_addr2 = #{user_addr2},
		user_addr3 = #{user_addr3},
		user_updatetime = #{user_updatetime}
		where user_id = #{user_id}
	</update>

	<!-- 회원 정보 수정 2 -->
	<update id="updateUser2" parameterType="user">
		update iof_users
		set user_name = #{user_name},
		user_phone = #{user_phone},
		user_zipcode = #{user_zipcode},
		user_addr1 = #{user_addr1},
		user_addr2 = #{user_addr2},
		user_addr3 = #{user_addr3},
		user_updatetime = #{user_updatetime}
		where user_id = #{user_id}
	</update>

	<!-- 회원 검색 -->
	<select id="getUser" parameterType="user" resultType="user">
		select *
		from iof_users
		where user_id = #{user_id}
	</select>

	<!-- 회원 삭제 -->
	<select id="deleteUser" parameterType="String">
		delete from iof_users
		where user_id = #{user_id}
	</select>

	<!-- 회원 리스트 검색 -->
	<select id="getUserList" parameterType="user" resultType="user">
		select *
		from iof_users
		where user_id ='%'||#{searchKeyword}||'%'
	</select>

	<!-- 로그인 검사 -->
	<select id="loginUser" parameterType="user" resultType="user">
		select *
		from iof_users
		where user_id=#{user_id}
	</select>

	<!-- 아이디 중복 검사 -->
	<select id="checkSignup" parameterType="String" resultType="int">
		select count(*)
		from iof_users
		where user_id=#{user_id}
	</select>

	<!-- 이메일 중복 검사 -->
	<select id="checkSignup_email" parameterType="String"
		resultType="int">
		select count(*)
		from iof_users
		where user_email=#{user_email}
	</select>

	<!-- 회원 정보 전체 리스트 -->
	<select id="getAllUserList" resultType="user">
		select *
		from iof_users
	</select>
	
	<!-- 전체 회원 수 -->
	<select id="count_user2" resultType="int">
		select count(*)
		from iof_users
		<include refid="search"></include>
	</select>
	
	<!-- 페이징 처리 수 -->
	<select id="getRead2" parameterType="map" resultType="user">
		SELECT * 
		FROM iof_users
		<include refid="search"></include>
		ORDER BY user_createtime desc
		LIMIT #{page}, 10 
	</select>
	
	<sql id="search">
            WHERE user_id LIKE CONCAT('%',#{keyword},'%')
            OR user_name LIKE CONCAT('%',#{keyword},'%')
            OR user_email LIKE CONCAT('%',#{keyword},'%')
	</sql>
	
	<select id="search_id" parameterType="user" resultType="user">
		select *
		from iof_users
		WHERE user_id LIKE CONCAT('%',#{id},'%')
	</select>
	
</mapper>